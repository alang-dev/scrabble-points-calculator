plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'jacoco'
}

group = 'com.scrabble'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot starters
    implementation 'org.springframework.boot:spring-boot-starter-web:3.5.4'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.5.4'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Database
    runtimeOnly 'org.postgresql:postgresql'
    testRuntimeOnly 'com.h2database:h2'

    // Development tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Utilities
    implementation 'org.apache.commons:commons-lang3:3.17.0'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.5.4'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.20.3'
    testImplementation 'org.testcontainers:postgresql:1.20.3'

    // Test runtime
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()

    // Enable testcontainers
    systemProperty 'testcontainers.reuse.enable', 'true'
}

// Spotless configuration for Google Java Format
spotless {
    java {
        googleJavaFormat('1.23.0')
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
}



// JaCoCo configuration for test coverage
jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = true
        csv.outputLocation = file("../coverage/backend/jacocoTestReport.csv")
        html.required = false
    }
}

// Task to show coverage summary with CSV report location
task coverageSummary {
    dependsOn jacocoTestReport
    doLast {
        def csvFile = file("../coverage/backend/jacocoTestReport.csv")

        println "\n" + "=".repeat(80)
        println "BACKEND COVERAGE REPORT GENERATED"
        println "=".repeat(80)
        if (csvFile.exists()) {
            println "CSV Report   : ${csvFile.absolutePath}"
        }
        println "=".repeat(80) + "\n"
    }
}

jacocoTestReport.finalizedBy coverageSummary

jacocoTestCoverageVerification {
    violationRules {
        // No coverage threshold enforced
    }
}

test.finalizedBy jacocoTestReport

task format {
    dependsOn 'spotlessApply'
    group = 'formatting'
    description = 'Apply code formatting'
}
